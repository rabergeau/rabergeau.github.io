<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title></title>
  <style>
    :root {
      --bg: #0b1020;
      --card: #121a33;
      --muted: #8fa3c8;
      --text: #e8eefc;
      --accent: #6ea8fe;
      --border: #22335f;
    }
    body {
      margin: 0; font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
      background: radial-gradient(1200px 800px at 10% 0%, #0f1b3f, var(--bg)); color: var(--text);
      min-height: 100vh; display: grid; place-items: start center; padding: 24px;
    }
    .container { width: min(1100px, 100%); }
    .card { background: linear-gradient(180deg, rgba(255,255,255,0.04), rgba(255,255,255,0.01)); border: 1px solid var(--border); border-radius: 18px; box-shadow: 0 20px 40px rgba(0,0,0,.35); overflow: hidden; }
    header { padding: 20px 22px; border-bottom: 1px solid var(--border); display: flex; align-items: center; gap: 16px; flex-wrap: wrap; }
    h1 { font-size: 1.25rem; margin: 0; letter-spacing: .2px; }
    .muted { color: var(--muted); font-size: .9rem; }
    .toolbar { padding: 14px 16px; border-bottom: 1px solid var(--border); display:flex; justify-content:space-between; align-items:center; flex-wrap:wrap; gap:10px; }
    .search { flex:1; background: #0c1533; border: 1px solid var(--border); color: var(--text); border-radius: 10px; padding: 10px 12px; }
    table { width: 100%; border-collapse: collapse; }
    thead th { position: sticky; top: 0; background: #0f1836; border-bottom: 1px solid var(--border); text-align: left; padding: 12px; font-size: .9rem; color: var(--muted); }
    tbody td { border-bottom: 1px solid #0f1b3b; padding: 12px; font-size: .95rem; }
    tbody tr:hover { background: rgba(110,168,254,0.06); }
    .name { font-family: ui-monospace, monospace; }
    .nowrap { white-space: nowrap; }
    .mutedRow { color: var(--muted); text-align:center; padding:20px; }
    footer { padding: 12px 16px; color: var(--muted); font-size: .85rem; display:flex; justify-content: space-between; }
  </style>
</head>
<body>
  <div class="container">
    <div class="card">
      <header>
      </header>

      <div class="toolbar">
      </div>

      <div style="max-height: 65vh; overflow: auto;">
        <table id="fileTable">
          <thead>
            <tr>
              <th>Name</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="tbody">
            <tr><td colspan="2" class="mutedRow">Loading…</td></tr>
          </tbody>
        </table>
      </div>

      <footer>
      </footer>
    </div>
  </div>

  <script>
    const repo = "rabergeau/rabergeau.github.io"; 
    const path = "roy";             

    const tbody = document.getElementById('tbody');
    const search = document.getElementById('search');
    const stats = document.getElementById('stats');

    let rows = [];

    async function loadFiles() {
      tbody.innerHTML = '<tr><td colspan="2" class="mutedRow">Loading…</td></tr>';
      try {
        const url = `https://api.github.com/repos/${repo}/contents/${path}`;
        const res = await fetch(url);
        if (!res.ok) throw new Error("GitHub API error");
        const data = await res.json();
        rows = data.map(item => ({
          name: item.name,
          url: item.html_url,
          download: item.download_url
        }));
        render();
      } catch (e) {
        console.error(e);
        tbody.innerHTML = '<tr><td colspan="2" class="mutedRow">Error loading files.</td></tr>';
      }
    }

    function render() {
      const q = search.value.trim().toLowerCase();
      const filtered = q ? rows.filter(r => r.name.toLowerCase().includes(q) || r.type.toLowerCase().includes(q)) : rows;
      if (!filtered.length) {
        tbody.innerHTML = '<tr><td colspan="3" class="mutedRow">No files found.</td></tr>';
        stats.textContent = "0 files";
        return;
      }
      const frag = document.createDocumentFragment();
      filtered.sort((a,b)=>a.name.localeCompare(b.name));
      for (const r of filtered) {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td class="name">${r.name}</td>
          <td class="nowrap"><a href="${r.download}" target="_blank">Download</a></td>
        `;
        frag.appendChild(tr);
      }
      tbody.replaceChildren(frag);
      stats.textContent = `${filtered.length} file${filtered.length!==1?"s":""}`;
    }
    loadFiles();
  </script>
</body>
</html>
